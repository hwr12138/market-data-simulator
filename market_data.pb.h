// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: market_data.proto
// Protobuf C++ Version: 5.29.3

#ifndef market_5fdata_2eproto_2epb_2eh
#define market_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_market_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_market_5fdata_2eproto;
namespace marketdata {
class MarketDataUpdate;
struct MarketDataUpdateDefaultTypeInternal;
extern MarketDataUpdateDefaultTypeInternal _MarketDataUpdate_default_instance_;
class OrderBookIncrementalUpdate;
struct OrderBookIncrementalUpdateDefaultTypeInternal;
extern OrderBookIncrementalUpdateDefaultTypeInternal _OrderBookIncrementalUpdate_default_instance_;
class OrderBookSnapshot;
struct OrderBookSnapshotDefaultTypeInternal;
extern OrderBookSnapshotDefaultTypeInternal _OrderBookSnapshot_default_instance_;
class PriceLevel;
struct PriceLevelDefaultTypeInternal;
extern PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;
class SubscriptionRequest;
struct SubscriptionRequestDefaultTypeInternal;
extern SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;
}  // namespace marketdata
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace marketdata {
enum SubscriptionRequest_Action : int {
  SubscriptionRequest_Action_SUBSCRIBE = 0,
  SubscriptionRequest_Action_UNSUBSCRIBE = 1,
  SubscriptionRequest_Action_SubscriptionRequest_Action_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SubscriptionRequest_Action_SubscriptionRequest_Action_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SubscriptionRequest_Action_IsValid(int value);
extern const uint32_t SubscriptionRequest_Action_internal_data_[];
constexpr SubscriptionRequest_Action SubscriptionRequest_Action_Action_MIN = static_cast<SubscriptionRequest_Action>(0);
constexpr SubscriptionRequest_Action SubscriptionRequest_Action_Action_MAX = static_cast<SubscriptionRequest_Action>(1);
constexpr int SubscriptionRequest_Action_Action_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SubscriptionRequest_Action_descriptor();
template <typename T>
const std::string& SubscriptionRequest_Action_Name(T value) {
  static_assert(std::is_same<T, SubscriptionRequest_Action>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Action_Name().");
  return SubscriptionRequest_Action_Name(static_cast<SubscriptionRequest_Action>(value));
}
template <>
inline const std::string& SubscriptionRequest_Action_Name(SubscriptionRequest_Action value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SubscriptionRequest_Action_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SubscriptionRequest_Action_Parse(absl::string_view name, SubscriptionRequest_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubscriptionRequest_Action>(
      SubscriptionRequest_Action_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SubscriptionRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.SubscriptionRequest) */ {
 public:
  inline SubscriptionRequest() : SubscriptionRequest(nullptr) {}
  ~SubscriptionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscriptionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscriptionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionRequest(const SubscriptionRequest& from) : SubscriptionRequest(nullptr, from) {}
  inline SubscriptionRequest(SubscriptionRequest&& from) noexcept
      : SubscriptionRequest(nullptr, std::move(from)) {}
  inline SubscriptionRequest& operator=(const SubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionRequest& operator=(SubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscriptionRequest*>(
        &_SubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SubscriptionRequest& a, SubscriptionRequest& b) { a.Swap(&b); }
  inline void Swap(SubscriptionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscriptionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscriptionRequest& from) { SubscriptionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscriptionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.SubscriptionRequest"; }

 protected:
  explicit SubscriptionRequest(::google::protobuf::Arena* arena);
  SubscriptionRequest(::google::protobuf::Arena* arena, const SubscriptionRequest& from);
  SubscriptionRequest(::google::protobuf::Arena* arena, SubscriptionRequest&& from) noexcept
      : SubscriptionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Action = SubscriptionRequest_Action;
  static constexpr Action SUBSCRIBE = SubscriptionRequest_Action_SUBSCRIBE;
  static constexpr Action UNSUBSCRIBE = SubscriptionRequest_Action_UNSUBSCRIBE;
  static inline bool Action_IsValid(int value) {
    return SubscriptionRequest_Action_IsValid(value);
  }
  static constexpr Action Action_MIN = SubscriptionRequest_Action_Action_MIN;
  static constexpr Action Action_MAX = SubscriptionRequest_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE = SubscriptionRequest_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Action_descriptor() {
    return SubscriptionRequest_Action_descriptor();
  }
  template <typename T>
  static inline const std::string& Action_Name(T value) {
    return SubscriptionRequest_Action_Name(value);
  }
  static inline bool Action_Parse(absl::string_view name, Action* value) {
    return SubscriptionRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentIdFieldNumber = 2,
    kActionFieldNumber = 1,
  };
  // string instrument_id = 2;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // .marketdata.SubscriptionRequest.Action action = 1;
  void clear_action() ;
  ::marketdata::SubscriptionRequest_Action action() const;
  void set_action(::marketdata::SubscriptionRequest_Action value);

  private:
  ::marketdata::SubscriptionRequest_Action _internal_action() const;
  void _internal_set_action(::marketdata::SubscriptionRequest_Action value);

  public:
  // @@protoc_insertion_point(class_scope:marketdata.SubscriptionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscriptionRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    int action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PriceLevel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.PriceLevel) */ {
 public:
  inline PriceLevel() : PriceLevel(nullptr) {}
  ~PriceLevel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PriceLevel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PriceLevel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PriceLevel(
      ::google::protobuf::internal::ConstantInitialized);

  inline PriceLevel(const PriceLevel& from) : PriceLevel(nullptr, from) {}
  inline PriceLevel(PriceLevel&& from) noexcept
      : PriceLevel(nullptr, std::move(from)) {}
  inline PriceLevel& operator=(const PriceLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceLevel& operator=(PriceLevel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceLevel* internal_default_instance() {
    return reinterpret_cast<const PriceLevel*>(
        &_PriceLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PriceLevel& a, PriceLevel& b) { a.Swap(&b); }
  inline void Swap(PriceLevel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceLevel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriceLevel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PriceLevel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PriceLevel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PriceLevel& from) { PriceLevel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PriceLevel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.PriceLevel"; }

 protected:
  explicit PriceLevel(::google::protobuf::Arena* arena);
  PriceLevel(::google::protobuf::Arena* arena, const PriceLevel& from);
  PriceLevel(::google::protobuf::Arena* arena, PriceLevel&& from) noexcept
      : PriceLevel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // double price = 1;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double quantity = 2;
  void clear_quantity() ;
  double quantity() const;
  void set_quantity(double value);

  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);

  public:
  // @@protoc_insertion_point(class_scope:marketdata.PriceLevel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PriceLevel& from_msg);
    double price_;
    double quantity_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBookSnapshot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.OrderBookSnapshot) */ {
 public:
  inline OrderBookSnapshot() : OrderBookSnapshot(nullptr) {}
  ~OrderBookSnapshot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderBookSnapshot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderBookSnapshot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderBookSnapshot(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderBookSnapshot(const OrderBookSnapshot& from) : OrderBookSnapshot(nullptr, from) {}
  inline OrderBookSnapshot(OrderBookSnapshot&& from) noexcept
      : OrderBookSnapshot(nullptr, std::move(from)) {}
  inline OrderBookSnapshot& operator=(const OrderBookSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderBookSnapshot& operator=(OrderBookSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderBookSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderBookSnapshot* internal_default_instance() {
    return reinterpret_cast<const OrderBookSnapshot*>(
        &_OrderBookSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(OrderBookSnapshot& a, OrderBookSnapshot& b) { a.Swap(&b); }
  inline void Swap(OrderBookSnapshot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderBookSnapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderBookSnapshot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderBookSnapshot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderBookSnapshot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderBookSnapshot& from) { OrderBookSnapshot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderBookSnapshot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.OrderBookSnapshot"; }

 protected:
  explicit OrderBookSnapshot(::google::protobuf::Arena* arena);
  OrderBookSnapshot(::google::protobuf::Arena* arena, const OrderBookSnapshot& from);
  OrderBookSnapshot(::google::protobuf::Arena* arena, OrderBookSnapshot&& from) noexcept
      : OrderBookSnapshot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBidsFieldNumber = 2,
    kAsksFieldNumber = 3,
    kInstrumentIdFieldNumber = 1,
  };
  // repeated .marketdata.PriceLevel bids = 2;
  int bids_size() const;
  private:
  int _internal_bids_size() const;

  public:
  void clear_bids() ;
  ::marketdata::PriceLevel* mutable_bids(int index);
  ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* mutable_bids();

  private:
  const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& _internal_bids() const;
  ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* _internal_mutable_bids();
  public:
  const ::marketdata::PriceLevel& bids(int index) const;
  ::marketdata::PriceLevel* add_bids();
  const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& bids() const;
  // repeated .marketdata.PriceLevel asks = 3;
  int asks_size() const;
  private:
  int _internal_asks_size() const;

  public:
  void clear_asks() ;
  ::marketdata::PriceLevel* mutable_asks(int index);
  ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* mutable_asks();

  private:
  const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& _internal_asks() const;
  ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* _internal_mutable_asks();
  public:
  const ::marketdata::PriceLevel& asks(int index) const;
  ::marketdata::PriceLevel* add_asks();
  const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& asks() const;
  // string instrument_id = 1;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:marketdata.OrderBookSnapshot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderBookSnapshot& from_msg);
    ::google::protobuf::RepeatedPtrField< ::marketdata::PriceLevel > bids_;
    ::google::protobuf::RepeatedPtrField< ::marketdata::PriceLevel > asks_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBookIncrementalUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.OrderBookIncrementalUpdate) */ {
 public:
  inline OrderBookIncrementalUpdate() : OrderBookIncrementalUpdate(nullptr) {}
  ~OrderBookIncrementalUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderBookIncrementalUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderBookIncrementalUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderBookIncrementalUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderBookIncrementalUpdate(const OrderBookIncrementalUpdate& from) : OrderBookIncrementalUpdate(nullptr, from) {}
  inline OrderBookIncrementalUpdate(OrderBookIncrementalUpdate&& from) noexcept
      : OrderBookIncrementalUpdate(nullptr, std::move(from)) {}
  inline OrderBookIncrementalUpdate& operator=(const OrderBookIncrementalUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderBookIncrementalUpdate& operator=(OrderBookIncrementalUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderBookIncrementalUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderBookIncrementalUpdate* internal_default_instance() {
    return reinterpret_cast<const OrderBookIncrementalUpdate*>(
        &_OrderBookIncrementalUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(OrderBookIncrementalUpdate& a, OrderBookIncrementalUpdate& b) { a.Swap(&b); }
  inline void Swap(OrderBookIncrementalUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderBookIncrementalUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderBookIncrementalUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderBookIncrementalUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderBookIncrementalUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderBookIncrementalUpdate& from) { OrderBookIncrementalUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderBookIncrementalUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.OrderBookIncrementalUpdate"; }

 protected:
  explicit OrderBookIncrementalUpdate(::google::protobuf::Arena* arena);
  OrderBookIncrementalUpdate(::google::protobuf::Arena* arena, const OrderBookIncrementalUpdate& from);
  OrderBookIncrementalUpdate(::google::protobuf::Arena* arena, OrderBookIncrementalUpdate&& from) noexcept
      : OrderBookIncrementalUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBidUpdatesFieldNumber = 2,
    kAskUpdatesFieldNumber = 3,
    kInstrumentIdFieldNumber = 1,
  };
  // repeated .marketdata.PriceLevel bid_updates = 2;
  int bid_updates_size() const;
  private:
  int _internal_bid_updates_size() const;

  public:
  void clear_bid_updates() ;
  ::marketdata::PriceLevel* mutable_bid_updates(int index);
  ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* mutable_bid_updates();

  private:
  const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& _internal_bid_updates() const;
  ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* _internal_mutable_bid_updates();
  public:
  const ::marketdata::PriceLevel& bid_updates(int index) const;
  ::marketdata::PriceLevel* add_bid_updates();
  const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& bid_updates() const;
  // repeated .marketdata.PriceLevel ask_updates = 3;
  int ask_updates_size() const;
  private:
  int _internal_ask_updates_size() const;

  public:
  void clear_ask_updates() ;
  ::marketdata::PriceLevel* mutable_ask_updates(int index);
  ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* mutable_ask_updates();

  private:
  const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& _internal_ask_updates() const;
  ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* _internal_mutable_ask_updates();
  public:
  const ::marketdata::PriceLevel& ask_updates(int index) const;
  ::marketdata::PriceLevel* add_ask_updates();
  const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& ask_updates() const;
  // string instrument_id = 1;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:marketdata.OrderBookIncrementalUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderBookIncrementalUpdate& from_msg);
    ::google::protobuf::RepeatedPtrField< ::marketdata::PriceLevel > bid_updates_;
    ::google::protobuf::RepeatedPtrField< ::marketdata::PriceLevel > ask_updates_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketDataUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.MarketDataUpdate) */ {
 public:
  inline MarketDataUpdate() : MarketDataUpdate(nullptr) {}
  ~MarketDataUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketDataUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketDataUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketDataUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketDataUpdate(const MarketDataUpdate& from) : MarketDataUpdate(nullptr, from) {}
  inline MarketDataUpdate(MarketDataUpdate&& from) noexcept
      : MarketDataUpdate(nullptr, std::move(from)) {}
  inline MarketDataUpdate& operator=(const MarketDataUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataUpdate& operator=(MarketDataUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDataUpdate& default_instance() {
    return *internal_default_instance();
  }
  enum UpdateTypeCase {
    kSnapshot = 1,
    kIncrementalUpdate = 2,
    UPDATE_TYPE_NOT_SET = 0,
  };
  static inline const MarketDataUpdate* internal_default_instance() {
    return reinterpret_cast<const MarketDataUpdate*>(
        &_MarketDataUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MarketDataUpdate& a, MarketDataUpdate& b) { a.Swap(&b); }
  inline void Swap(MarketDataUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDataUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketDataUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketDataUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketDataUpdate& from) { MarketDataUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketDataUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.MarketDataUpdate"; }

 protected:
  explicit MarketDataUpdate(::google::protobuf::Arena* arena);
  MarketDataUpdate(::google::protobuf::Arena* arena, const MarketDataUpdate& from);
  MarketDataUpdate(::google::protobuf::Arena* arena, MarketDataUpdate&& from) noexcept
      : MarketDataUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSnapshotFieldNumber = 1,
    kIncrementalUpdateFieldNumber = 2,
  };
  // .marketdata.OrderBookSnapshot snapshot = 1;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;

  public:
  void clear_snapshot() ;
  const ::marketdata::OrderBookSnapshot& snapshot() const;
  PROTOBUF_NODISCARD ::marketdata::OrderBookSnapshot* release_snapshot();
  ::marketdata::OrderBookSnapshot* mutable_snapshot();
  void set_allocated_snapshot(::marketdata::OrderBookSnapshot* value);
  void unsafe_arena_set_allocated_snapshot(::marketdata::OrderBookSnapshot* value);
  ::marketdata::OrderBookSnapshot* unsafe_arena_release_snapshot();

  private:
  const ::marketdata::OrderBookSnapshot& _internal_snapshot() const;
  ::marketdata::OrderBookSnapshot* _internal_mutable_snapshot();

  public:
  // .marketdata.OrderBookIncrementalUpdate incremental_update = 2;
  bool has_incremental_update() const;
  private:
  bool _internal_has_incremental_update() const;

  public:
  void clear_incremental_update() ;
  const ::marketdata::OrderBookIncrementalUpdate& incremental_update() const;
  PROTOBUF_NODISCARD ::marketdata::OrderBookIncrementalUpdate* release_incremental_update();
  ::marketdata::OrderBookIncrementalUpdate* mutable_incremental_update();
  void set_allocated_incremental_update(::marketdata::OrderBookIncrementalUpdate* value);
  void unsafe_arena_set_allocated_incremental_update(::marketdata::OrderBookIncrementalUpdate* value);
  ::marketdata::OrderBookIncrementalUpdate* unsafe_arena_release_incremental_update();

  private:
  const ::marketdata::OrderBookIncrementalUpdate& _internal_incremental_update() const;
  ::marketdata::OrderBookIncrementalUpdate* _internal_mutable_incremental_update();

  public:
  void clear_update_type();
  UpdateTypeCase update_type_case() const;
  // @@protoc_insertion_point(class_scope:marketdata.MarketDataUpdate)
 private:
  class _Internal;
  void set_has_snapshot();
  void set_has_incremental_update();
  inline bool has_update_type() const;
  inline void clear_has_update_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketDataUpdate& from_msg);
    union UpdateTypeUnion {
      constexpr UpdateTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::marketdata::OrderBookSnapshot* snapshot_;
      ::marketdata::OrderBookIncrementalUpdate* incremental_update_;
    } update_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_market_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SubscriptionRequest

// .marketdata.SubscriptionRequest.Action action = 1;
inline void SubscriptionRequest::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = 0;
}
inline ::marketdata::SubscriptionRequest_Action SubscriptionRequest::action() const {
  // @@protoc_insertion_point(field_get:marketdata.SubscriptionRequest.action)
  return _internal_action();
}
inline void SubscriptionRequest::set_action(::marketdata::SubscriptionRequest_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:marketdata.SubscriptionRequest.action)
}
inline ::marketdata::SubscriptionRequest_Action SubscriptionRequest::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::marketdata::SubscriptionRequest_Action>(_impl_.action_);
}
inline void SubscriptionRequest::_internal_set_action(::marketdata::SubscriptionRequest_Action value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = value;
}

// string instrument_id = 2;
inline void SubscriptionRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& SubscriptionRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.SubscriptionRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:marketdata.SubscriptionRequest.instrument_id)
}
inline std::string* SubscriptionRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:marketdata.SubscriptionRequest.instrument_id)
  return _s;
}
inline const std::string& SubscriptionRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void SubscriptionRequest::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* SubscriptionRequest::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* SubscriptionRequest::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:marketdata.SubscriptionRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void SubscriptionRequest::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:marketdata.SubscriptionRequest.instrument_id)
}

// -------------------------------------------------------------------

// MarketDataUpdate

// .marketdata.OrderBookSnapshot snapshot = 1;
inline bool MarketDataUpdate::has_snapshot() const {
  return update_type_case() == kSnapshot;
}
inline bool MarketDataUpdate::_internal_has_snapshot() const {
  return update_type_case() == kSnapshot;
}
inline void MarketDataUpdate::set_has_snapshot() {
  _impl_._oneof_case_[0] = kSnapshot;
}
inline void MarketDataUpdate::clear_snapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (update_type_case() == kSnapshot) {
    if (GetArena() == nullptr) {
      delete _impl_.update_type_.snapshot_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.update_type_.snapshot_);
    }
    clear_has_update_type();
  }
}
inline ::marketdata::OrderBookSnapshot* MarketDataUpdate::release_snapshot() {
  // @@protoc_insertion_point(field_release:marketdata.MarketDataUpdate.snapshot)
  if (update_type_case() == kSnapshot) {
    clear_has_update_type();
    auto* temp = _impl_.update_type_.snapshot_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_type_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::marketdata::OrderBookSnapshot& MarketDataUpdate::_internal_snapshot() const {
  return update_type_case() == kSnapshot ? *_impl_.update_type_.snapshot_ : reinterpret_cast<::marketdata::OrderBookSnapshot&>(::marketdata::_OrderBookSnapshot_default_instance_);
}
inline const ::marketdata::OrderBookSnapshot& MarketDataUpdate::snapshot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.MarketDataUpdate.snapshot)
  return _internal_snapshot();
}
inline ::marketdata::OrderBookSnapshot* MarketDataUpdate::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:marketdata.MarketDataUpdate.snapshot)
  if (update_type_case() == kSnapshot) {
    clear_has_update_type();
    auto* temp = _impl_.update_type_.snapshot_;
    _impl_.update_type_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataUpdate::unsafe_arena_set_allocated_snapshot(::marketdata::OrderBookSnapshot* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_update_type();
  if (value) {
    set_has_snapshot();
    _impl_.update_type_.snapshot_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:marketdata.MarketDataUpdate.snapshot)
}
inline ::marketdata::OrderBookSnapshot* MarketDataUpdate::_internal_mutable_snapshot() {
  if (update_type_case() != kSnapshot) {
    clear_update_type();
    set_has_snapshot();
    _impl_.update_type_.snapshot_ =
        ::google::protobuf::Message::DefaultConstruct<::marketdata::OrderBookSnapshot>(GetArena());
  }
  return _impl_.update_type_.snapshot_;
}
inline ::marketdata::OrderBookSnapshot* MarketDataUpdate::mutable_snapshot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::marketdata::OrderBookSnapshot* _msg = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:marketdata.MarketDataUpdate.snapshot)
  return _msg;
}

// .marketdata.OrderBookIncrementalUpdate incremental_update = 2;
inline bool MarketDataUpdate::has_incremental_update() const {
  return update_type_case() == kIncrementalUpdate;
}
inline bool MarketDataUpdate::_internal_has_incremental_update() const {
  return update_type_case() == kIncrementalUpdate;
}
inline void MarketDataUpdate::set_has_incremental_update() {
  _impl_._oneof_case_[0] = kIncrementalUpdate;
}
inline void MarketDataUpdate::clear_incremental_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (update_type_case() == kIncrementalUpdate) {
    if (GetArena() == nullptr) {
      delete _impl_.update_type_.incremental_update_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.update_type_.incremental_update_);
    }
    clear_has_update_type();
  }
}
inline ::marketdata::OrderBookIncrementalUpdate* MarketDataUpdate::release_incremental_update() {
  // @@protoc_insertion_point(field_release:marketdata.MarketDataUpdate.incremental_update)
  if (update_type_case() == kIncrementalUpdate) {
    clear_has_update_type();
    auto* temp = _impl_.update_type_.incremental_update_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_type_.incremental_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::marketdata::OrderBookIncrementalUpdate& MarketDataUpdate::_internal_incremental_update() const {
  return update_type_case() == kIncrementalUpdate ? *_impl_.update_type_.incremental_update_ : reinterpret_cast<::marketdata::OrderBookIncrementalUpdate&>(::marketdata::_OrderBookIncrementalUpdate_default_instance_);
}
inline const ::marketdata::OrderBookIncrementalUpdate& MarketDataUpdate::incremental_update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.MarketDataUpdate.incremental_update)
  return _internal_incremental_update();
}
inline ::marketdata::OrderBookIncrementalUpdate* MarketDataUpdate::unsafe_arena_release_incremental_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:marketdata.MarketDataUpdate.incremental_update)
  if (update_type_case() == kIncrementalUpdate) {
    clear_has_update_type();
    auto* temp = _impl_.update_type_.incremental_update_;
    _impl_.update_type_.incremental_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataUpdate::unsafe_arena_set_allocated_incremental_update(::marketdata::OrderBookIncrementalUpdate* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_update_type();
  if (value) {
    set_has_incremental_update();
    _impl_.update_type_.incremental_update_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:marketdata.MarketDataUpdate.incremental_update)
}
inline ::marketdata::OrderBookIncrementalUpdate* MarketDataUpdate::_internal_mutable_incremental_update() {
  if (update_type_case() != kIncrementalUpdate) {
    clear_update_type();
    set_has_incremental_update();
    _impl_.update_type_.incremental_update_ =
        ::google::protobuf::Message::DefaultConstruct<::marketdata::OrderBookIncrementalUpdate>(GetArena());
  }
  return _impl_.update_type_.incremental_update_;
}
inline ::marketdata::OrderBookIncrementalUpdate* MarketDataUpdate::mutable_incremental_update() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::marketdata::OrderBookIncrementalUpdate* _msg = _internal_mutable_incremental_update();
  // @@protoc_insertion_point(field_mutable:marketdata.MarketDataUpdate.incremental_update)
  return _msg;
}

inline bool MarketDataUpdate::has_update_type() const {
  return update_type_case() != UPDATE_TYPE_NOT_SET;
}
inline void MarketDataUpdate::clear_has_update_type() {
  _impl_._oneof_case_[0] = UPDATE_TYPE_NOT_SET;
}
inline MarketDataUpdate::UpdateTypeCase MarketDataUpdate::update_type_case() const {
  return MarketDataUpdate::UpdateTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// OrderBookSnapshot

// string instrument_id = 1;
inline void OrderBookSnapshot::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& OrderBookSnapshot::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.OrderBookSnapshot.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBookSnapshot::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:marketdata.OrderBookSnapshot.instrument_id)
}
inline std::string* OrderBookSnapshot::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:marketdata.OrderBookSnapshot.instrument_id)
  return _s;
}
inline const std::string& OrderBookSnapshot::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void OrderBookSnapshot::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* OrderBookSnapshot::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* OrderBookSnapshot::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:marketdata.OrderBookSnapshot.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void OrderBookSnapshot::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:marketdata.OrderBookSnapshot.instrument_id)
}

// repeated .marketdata.PriceLevel bids = 2;
inline int OrderBookSnapshot::_internal_bids_size() const {
  return _internal_bids().size();
}
inline int OrderBookSnapshot::bids_size() const {
  return _internal_bids_size();
}
inline void OrderBookSnapshot::clear_bids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bids_.Clear();
}
inline ::marketdata::PriceLevel* OrderBookSnapshot::mutable_bids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:marketdata.OrderBookSnapshot.bids)
  return _internal_mutable_bids()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* OrderBookSnapshot::mutable_bids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:marketdata.OrderBookSnapshot.bids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bids();
}
inline const ::marketdata::PriceLevel& OrderBookSnapshot::bids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.OrderBookSnapshot.bids)
  return _internal_bids().Get(index);
}
inline ::marketdata::PriceLevel* OrderBookSnapshot::add_bids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::marketdata::PriceLevel* _add = _internal_mutable_bids()->Add();
  // @@protoc_insertion_point(field_add:marketdata.OrderBookSnapshot.bids)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& OrderBookSnapshot::bids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:marketdata.OrderBookSnapshot.bids)
  return _internal_bids();
}
inline const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>&
OrderBookSnapshot::_internal_bids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bids_;
}
inline ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>*
OrderBookSnapshot::_internal_mutable_bids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bids_;
}

// repeated .marketdata.PriceLevel asks = 3;
inline int OrderBookSnapshot::_internal_asks_size() const {
  return _internal_asks().size();
}
inline int OrderBookSnapshot::asks_size() const {
  return _internal_asks_size();
}
inline void OrderBookSnapshot::clear_asks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.asks_.Clear();
}
inline ::marketdata::PriceLevel* OrderBookSnapshot::mutable_asks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:marketdata.OrderBookSnapshot.asks)
  return _internal_mutable_asks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* OrderBookSnapshot::mutable_asks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:marketdata.OrderBookSnapshot.asks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_asks();
}
inline const ::marketdata::PriceLevel& OrderBookSnapshot::asks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.OrderBookSnapshot.asks)
  return _internal_asks().Get(index);
}
inline ::marketdata::PriceLevel* OrderBookSnapshot::add_asks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::marketdata::PriceLevel* _add = _internal_mutable_asks()->Add();
  // @@protoc_insertion_point(field_add:marketdata.OrderBookSnapshot.asks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& OrderBookSnapshot::asks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:marketdata.OrderBookSnapshot.asks)
  return _internal_asks();
}
inline const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>&
OrderBookSnapshot::_internal_asks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.asks_;
}
inline ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>*
OrderBookSnapshot::_internal_mutable_asks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.asks_;
}

// -------------------------------------------------------------------

// OrderBookIncrementalUpdate

// string instrument_id = 1;
inline void OrderBookIncrementalUpdate::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& OrderBookIncrementalUpdate::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.OrderBookIncrementalUpdate.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBookIncrementalUpdate::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:marketdata.OrderBookIncrementalUpdate.instrument_id)
}
inline std::string* OrderBookIncrementalUpdate::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:marketdata.OrderBookIncrementalUpdate.instrument_id)
  return _s;
}
inline const std::string& OrderBookIncrementalUpdate::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void OrderBookIncrementalUpdate::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* OrderBookIncrementalUpdate::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* OrderBookIncrementalUpdate::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:marketdata.OrderBookIncrementalUpdate.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void OrderBookIncrementalUpdate::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:marketdata.OrderBookIncrementalUpdate.instrument_id)
}

// repeated .marketdata.PriceLevel bid_updates = 2;
inline int OrderBookIncrementalUpdate::_internal_bid_updates_size() const {
  return _internal_bid_updates().size();
}
inline int OrderBookIncrementalUpdate::bid_updates_size() const {
  return _internal_bid_updates_size();
}
inline void OrderBookIncrementalUpdate::clear_bid_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_updates_.Clear();
}
inline ::marketdata::PriceLevel* OrderBookIncrementalUpdate::mutable_bid_updates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:marketdata.OrderBookIncrementalUpdate.bid_updates)
  return _internal_mutable_bid_updates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* OrderBookIncrementalUpdate::mutable_bid_updates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:marketdata.OrderBookIncrementalUpdate.bid_updates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bid_updates();
}
inline const ::marketdata::PriceLevel& OrderBookIncrementalUpdate::bid_updates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.OrderBookIncrementalUpdate.bid_updates)
  return _internal_bid_updates().Get(index);
}
inline ::marketdata::PriceLevel* OrderBookIncrementalUpdate::add_bid_updates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::marketdata::PriceLevel* _add = _internal_mutable_bid_updates()->Add();
  // @@protoc_insertion_point(field_add:marketdata.OrderBookIncrementalUpdate.bid_updates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& OrderBookIncrementalUpdate::bid_updates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:marketdata.OrderBookIncrementalUpdate.bid_updates)
  return _internal_bid_updates();
}
inline const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>&
OrderBookIncrementalUpdate::_internal_bid_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bid_updates_;
}
inline ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>*
OrderBookIncrementalUpdate::_internal_mutable_bid_updates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bid_updates_;
}

// repeated .marketdata.PriceLevel ask_updates = 3;
inline int OrderBookIncrementalUpdate::_internal_ask_updates_size() const {
  return _internal_ask_updates().size();
}
inline int OrderBookIncrementalUpdate::ask_updates_size() const {
  return _internal_ask_updates_size();
}
inline void OrderBookIncrementalUpdate::clear_ask_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_updates_.Clear();
}
inline ::marketdata::PriceLevel* OrderBookIncrementalUpdate::mutable_ask_updates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:marketdata.OrderBookIncrementalUpdate.ask_updates)
  return _internal_mutable_ask_updates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>* OrderBookIncrementalUpdate::mutable_ask_updates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:marketdata.OrderBookIncrementalUpdate.ask_updates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ask_updates();
}
inline const ::marketdata::PriceLevel& OrderBookIncrementalUpdate::ask_updates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.OrderBookIncrementalUpdate.ask_updates)
  return _internal_ask_updates().Get(index);
}
inline ::marketdata::PriceLevel* OrderBookIncrementalUpdate::add_ask_updates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::marketdata::PriceLevel* _add = _internal_mutable_ask_updates()->Add();
  // @@protoc_insertion_point(field_add:marketdata.OrderBookIncrementalUpdate.ask_updates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>& OrderBookIncrementalUpdate::ask_updates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:marketdata.OrderBookIncrementalUpdate.ask_updates)
  return _internal_ask_updates();
}
inline const ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>&
OrderBookIncrementalUpdate::_internal_ask_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ask_updates_;
}
inline ::google::protobuf::RepeatedPtrField<::marketdata::PriceLevel>*
OrderBookIncrementalUpdate::_internal_mutable_ask_updates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ask_updates_;
}

// -------------------------------------------------------------------

// PriceLevel

// double price = 1;
inline void PriceLevel::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double PriceLevel::price() const {
  // @@protoc_insertion_point(field_get:marketdata.PriceLevel.price)
  return _internal_price();
}
inline void PriceLevel::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:marketdata.PriceLevel.price)
}
inline double PriceLevel::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void PriceLevel::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double quantity = 2;
inline void PriceLevel::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline double PriceLevel::quantity() const {
  // @@protoc_insertion_point(field_get:marketdata.PriceLevel.quantity)
  return _internal_quantity();
}
inline void PriceLevel::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:marketdata.PriceLevel.quantity)
}
inline double PriceLevel::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void PriceLevel::_internal_set_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace marketdata


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::marketdata::SubscriptionRequest_Action> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::marketdata::SubscriptionRequest_Action>() {
  return ::marketdata::SubscriptionRequest_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // market_5fdata_2eproto_2epb_2eh
